{"version":3,"sources":["img/gmail.png","img/linkedin.png","img/github.png","img/drawing-transparent.png","components/Quotes.js","components/Rundown.js","components/Plans.js","components/Footer.js","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quotes","Component","Rundown","Plans","Footer","className","class","href","border","alt","src","require","Homepage","App","style","width","to","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,iD,+HCY5BC,G,6LARX,OACE,6BACA,4C,GAJeC,cCUNC,E,iLARX,OACE,6BACA,6C,GAJgBD,aCUPE,E,iLARX,OACE,6BACA,2C,GAJcF,aCwBLG,G,uLArBX,OACE,yBAAKC,UAAU,UAEf,0BAAMC,MAAM,eACV,6BACE,uBAAGC,KAAK,gCAAR,IAAwC,yBAAKC,OAAO,IAAIC,IAAI,QAAQC,IAAMC,EAAQ,IAAqBN,UAAU,UAAjH,MAEF,6BACI,uBAAGE,KAAK,6CAAR,IAAqD,yBAAKC,OAAO,IAAIC,IAAI,WAAWC,IAAMC,EAAQ,IAAwBN,UAAU,UAApI,MAEJ,6BACI,uBAAGE,KAAK,6BAAR,IAAqC,yBAAKC,OAAO,IAAIC,IAAI,SAASC,IAAMC,EAAQ,IAAsBN,UAAU,UAAhH,Y,GAbSJ,cCSNW,E,iLARX,OACE,6BACA,4C,GAJiBX,aCwCRY,E,iLA9BX,OACE,yBAAKR,UAAU,OACf,4BAAQA,UAAU,cAElB,2BAGA,0BAAMC,MAAM,uBACX,yBAAKA,MAAM,4CACX,gCAAK,yBAAKI,IAAMC,EAAQ,IAAmCG,MAAO,CAACC,MAAO,OAA1E,2CACG,kBAAC,IAAD,CAASC,GAAG,UAAUX,UAAU,UAAhC,WADH,IAEG,kBAAC,IAAD,CAASW,GAAG,WAAWX,UAAU,WAAjC,YAFH,QAGG,kBAAC,IAAD,CAASW,GAAG,SAASX,UAAU,SAA/B,eAHH,UASD,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOY,KAAK,UAAUC,UAAWlB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,WAAWC,UAAWhB,IAClC,kBAAC,IAAD,CAAOe,KAAK,SAASC,UAAWf,IAChC,kBAAC,IAAD,CAAOc,KAAK,QAAQC,UAAWN,KAE/B,kBAAC,EAAD,W,GA1BYX,aCEEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,IAAD,SAAgB,kBAAC,EAAD,MAAhB,KAA0CC,SAASC,eAAe,SD6H5E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66ac1c45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gmail.131920bb.png\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.4cdfff6a.png\";","module.exports = __webpack_public_path__ + \"static/media/github.83e5dc8c.png\";","module.exports = __webpack_public_path__ + \"static/media/drawing-transparent.483d638d.png\";","import React, { Component } from 'react';\n\nclass Quotes extends Component {\n  render() {\n    return (\n      <div>\n      <p> Quotes </p>\n      </div>\n    );\n  }\n}\n\nexport default Quotes;\n","import React, { Component } from 'react';\n\nclass Rundown extends Component {\n  render() {\n    return (\n      <div>\n      <p> Rundown </p>\n      </div>\n    )\n  }\n}\n\nexport default Rundown;\n","import React, { Component } from 'react';\n\nclass Plans extends Component {\n  render() {\n    return (\n      <div>\n      <p> Plans </p>\n      </div>\n    );\n  }\n}\n\nexport default Plans;\n","import React, { Component } from 'react';\nimport './Footer.css'\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"footer\">\n\n      <main class=\"flex-center\">\n        <div>\n          <a href=\"mailto:gracekwak25@gmail.com\"> <img border=\"0\" alt=\"gmail\" src={ require('../img/gmail.png')} className=\"icons\"/> </a>\n        </div>\n        <div>\n            <a href=\"https://www.linkedin.com/in/grace-j-kwak/\"> <img border=\"0\" alt=\"linkedin\" src={ require('../img/linkedin.png')} className=\"icons\"/> </a>\n        </div>\n        <div>\n            <a href=\"https://github.com/Grace0\"> <img border=\"0\" alt=\"github\" src={ require('../img/github.png')} className=\"icons\"/> </a>\n        </div>\n\n      </main>\n\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\n\nclass Homepage extends Component {\n  render() {\n    return (\n      <div>\n      <p>Homepage</p>\n      </div>\n    );\n  }\n}\n\nexport default Homepage;\n","import React, { Component } from 'react';\nimport { Switch, Route, NavLink } from 'react-router-dom';\nimport './App.css';\nimport './unsemantic-grid.css'\nimport Quotes from './components/Quotes';\nimport Rundown from './components/Rundown';\nimport Plans from './components/Plans';\nimport Footer from './components/Footer';\nimport Homepage from './components/Homepage';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n\n      <p>\n\n\n      <main class=\"grid-container home\">\n       <div class='grid-100 mobile-grid-100 tablet-grid-100'>\n       <h1> <img src={ require('./img/drawing-transparent.png') } style={{width: 200}} /> Hello! I'm Grace Kwak. Here's what I am\n          <NavLink to='/quotes' className=\"quotes\"> making</NavLink>,\n          <NavLink to='/rundown' className=\"rundown\"> reading</NavLink>, and\n          <NavLink to='/plans' className=\"plans\"> working on</NavLink>. </h1>\n       </div>\n      </main>\n\n      </p>\n      </header>\n      <Switch>\n      <Route path='/quotes' component={Quotes}/>\n      <Route path='/rundown' component={Rundown}/>\n      <Route path='/plans' component={Plans}/>\n      <Route path='/home' component={Homepage}/>\n      </Switch>\n      <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter> <App /> </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}